<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>

@model <#= ViewDataTypeName #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = null;
<#
}
#>
}


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (ReferenceScriptLibraries) {
#>
<#
    if (!IsLayoutPageSelected && IsBundleConfigPresent) {
#>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<#
    }
#>
<#
    else if (!IsLayoutPageSelected) {
#>
<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<#
    }
#>

<#
}
#>

<div class="row">

    <div class="col-xl-12 col-12">
        <div class="row">
            <div class="col-lg-12 col-12">
                <div class="card">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title" id="basic-layout-form">@ViewBag.Title</h4>
                                <a class="heading-elements-toggle"><i class="la la-ellipsis-v font-medium-3"></i></a>
                                <div class="heading-elements">
                                    <ul class="list-inline mb-0">
                                       
                                    </ul>
                                </div>
                            </div>
                            <div class="card-content collapse show">
                                <div class="card-body">
                                    <div class="card-text">
                                        
                                    </div>
                                    <!-- Form Start Code -->
			@using (Html.BeginForm("<#= ViewName #>", "<#= ViewDataTypeShortName #>", FormMethod.Post, new { @class = "form" , enctype = "multipart/form-data"}))
                                    {
                                        @Html.AntiForgeryToken()
				 <div class="form-body">    
				 <h4 class="form-section"><i class="ft-user"></i> <#= ViewName #> </h4>
			 <div class="row">
			     <div class="col-md-6">
			         <div class="form-group">
<# 
    if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
<#        
    } else {
#>
        @Html.ValidationSummary(true)
<#      
    }
#>
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

#>
		</div>	
		</div>
		<div class="col-md-6">
		<div class="form-group">
                                               
<#
        if (property.IsForeignKey) {
#>
			
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>")
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
			
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
				
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
				
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <div class="checkbox">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
		
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>,new { htmlAttributes = new { @class = "form-control", @placeholder = @"" + Html.DisplayNameFor(model => model.CompanyName) + @"" } })
				
<#
            } else {
#>
			
                @Html.EditorFor(model => model.<#= property.PropertyName #>,new { htmlAttributes = new { @class = "form-control", @placeholder = @"" + Html.DisplayNameFor(model => model.CompanyName) + @"" } })
				
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
							 </div>
                              </div>
<#
        }
#>

<#
    }
}
#>
								</div>
								</div>
									<div class="form-actions">
											 <button type="submit" class="btn btn-primary">
                                                <i class="la la-check-square-o"></i> حفظ البيانات
                                            </button>
                                            <button type="button" class="btn btn-warning mr-1">
                                                <i class="ft-x"></i> الغاء
                                            </button>
                                            
                                        </div>
			 }
		 <!-- Form End Code -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

    </div>
</div>
@section ScriptsReqierd{




}


<#
if(IsLayoutPageSelected && ReferenceScriptLibraries && IsBundleConfigPresent) {
#>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<#
}
#>
<#
else if(IsLayoutPageSelected && ReferenceScriptLibraries) {
#>

<script src="~/Scripts/jquery-<#= JQueryVersion #>.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<#
}
#>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>
<#
if(!IsPartialView && !IsLayoutPageSelected) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>